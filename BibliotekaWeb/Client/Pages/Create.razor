@page "/Create"
@page "/Create/edit/{bookID:int}"
@using BibliotekaWeb.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
<PageTitle>@Title</PageTitle>
<h1>@Title</h1>
@if (isLoading)
{
    <div class="loading-animation">
        <i class="fas fa-spinner fa-spin"></i>
    </div>
}
else
{
    <EditForm Model="@book" OnValidSubmit="SaveBook">
        <DataAnnotationsValidator />
        <div class="container-fluid">
            <div class="card-row row">
                <div class="col-lg-6">
                    <div class="card c-height">
                        <div class="card-body">
                            <div class="mb-3">
                                <label for="Name" class="form-label">Tytuł</label>
                                <div class="col-md">
                                    <InputText class="form-control" @bind-Value="book.Title" />
                                </div>
                                <ValidationMessage For="@(() => book.Title)" />
                            </div>
                            <div class="mb-3">
                                <label for="Address" class="form-label">Autor</label>
                                <div class="col-md">
                                    <InputText class="form-control" @bind-Value="book.Author" />
                                </div>
                                <ValidationMessage For="@(() => book.Author)" />
                            </div>
                            <div class="mb-3">
                                <label for="Cellnumber" class="form-label">Opis</label>
                                <div class="col-md">
                                    <InputText class="form-control" @bind-Value="book.Description" />
                                </div>
                                <ValidationMessage For="@(() => book.Description)" />
                            </div>
                            <div class="mb-3">
                                <label for="Emailid" class="form-label">Gatunek</label>
                                <div class="col-md">
                                    <InputText class="form-control" @bind-Value="book.Type" />
                                </div>
                                <ValidationMessage For="@(() => book.Type)" />
                            </div>
                            <div class="mb-3">
                                <label for="Image" class="form-label">Zdjęcie</label>
                                <div class="col-md">
                                    <InputFile class="form-control" OnChange="OnImageSelected" accept=".jpg"/>
                                </div>
                                <ValidationMessage For="@(() => book.Img)" />
                            </div>

                            <div class="form-group">
                                <button type="submit" class="btn btn-primary">Zapisz</button>
                                <button class="btn btn-light" @onclick="Cancel">Anuluj</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 element-to-hide">
                    <div class="card c-height">
                        <div class="card-body text-center">
                            <img src="@imageSrc" class="mt-3 img-thumbnail" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int bookID { get; set; }
    protected string Title = "Stwórz";
    protected Book book = new();
    private IBrowserFile? imageFile;
    private string? imageSrc;
    private bool isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        if (bookID != 0)
        {
            Title = "Edycja";
            book = await Http.GetFromJsonAsync<Book>("api/Book/" + bookID);
            if (book.Img != null)
            {
                var format = "image/png";
                var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(book.Img)}";
                imageSrc = imageDataUrl;
            }
        }
    }
    protected async Task SaveBook()
    {
        isLoading = true;
        StateHasChanged(); // Odśwież widok, aby pokazać animację ładowania

        await Task.Run(async () =>
        {
            if (book.ID != 0)
            {
                await Http.PutAsJsonAsync("api/Book", book);
            }
            else
            {
                await Http.PostAsJsonAsync("api/Book", book);
            }
        });

        isLoading = false;
        StateHasChanged(); // Odśwież widok, aby ukryć animację ładowania

        Cancel();
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        imageFile = e.File;
        if (imageFile != null)
        {
            // Odczytanie zawartości pliku jako tablicy bajtów
            using (var stream = imageFile.OpenReadStream())
            {
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    book.Img = memoryStream.ToArray();
                }
            }
            // Konwertowanie zawartości pliku na format Data URI
            var format = "image/png";
            var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(book.Img)}";
            imageSrc = imageDataUrl;

        }
    }
}
