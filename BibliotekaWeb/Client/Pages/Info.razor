@page "/Info/{bookID:int}"
@page "/delete/{bookID:int}/{isDelete:bool}"
@using BibliotekaWeb.Shared;
@inject HttpClient Http
@inject NavigationManager NavigationManager
<PageTitle>@Title</PageTitle>
@if(isLoading){
    <div class="loading-animation">
        <i class="fas fa-spinner fa-spin"></i>
    </div>
}else{
    <div class="container-fluid d-flex">
        <div class="col-lg-6">
            <div class="card c-height m-1">
                <div class="card-body">
                    <div class="mb-3 text-center">
                        <h3>Tytył:</h3>
                        <h4>@book.Title</h4>
                    </div>
                    <div class="d-flex">
                        <div class="col-6 mb-3 d-inline">
                            <h3>Autor:</h3>
                            <h4>@book.Author</h4>
                        </div>
                        <div class="col-6 mb-3 d-inline">
                            <h3>Gatunek:</h3>
                            <h4>@book.Type</h4>
                        </div>
                    </div>
                    <div class="mb-3 text-center">
                        <h3>Opis:</h3>
                        <h4 class="text-center">@book.Description</h4>
                    </div>
                    <div class="mb-3 text-center">
                        <div class="btn-group">
                            @if(isDelete){
                                <button class="btn btn-outline-danger" @onclick="OpenConfirmationModal">Usuń</button>
                                <ConfirmModal @ref="ConfirmModalInstance" Title="Chcesz usunąć książkę?" Message="Czy napewno chcesz kontynuować?" OnResponse="HandleResponse"></ConfirmModal>
                            }
                            <button class="btn btn-outline-info" @onclick="Cancel">Wróć</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card m-1">
                <div class="card-body c-height">
                    <img src="@imageSrc" class="mt-3 img-thumbnail"/>
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Parameter]
    public int bookID{ get; set; }
    [Parameter]
    public bool isDelete { get; set; }
    protected Book book = new();
    private bool isLoading = false;
    private string? imageSrc;
    private string Title = "Informacje";
    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        book = await Http.GetFromJsonAsync<Book>("api/Book/" + bookID);
        if(isDelete){
            Title = "Usunięcie";
        }
        if (book.Img != null)
        {
            var format = "image/png";
            var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(book.Img)}";
            imageSrc = imageDataUrl;
        }
        isLoading = false;
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
    protected async Task Delete(int id){
        isLoading = true;
        StateHasChanged();
        await Http.DeleteAsync($"api/Book/{id}");
        isLoading = false;
        StateHasChanged();
        Cancel();
    }

    //Okienko 
    private ConfirmModal? ConfirmModalInstance;

    private async Task OpenConfirmationModal()
    {
        ConfirmModalInstance.Open();
    }

    private async Task HandleResponse(bool confirmed)
    {
        if (confirmed)
        {
            await Delete(bookID);
        }
    }
}
